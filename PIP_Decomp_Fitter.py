# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Brian\Documents\work\PIP_Decomp_Fitter.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import numpy as np
import os
import matplotlib.pyplot as plt
import scipy.io as scipy
import matplotlib
from datetime import datetime
from dateutil import parser
matplotlib.use('Qt5Agg')

from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvas ##replace PlotWidget with
import pulse_sorter as p_sort

import pulses1 as p1
import pulses1_m as p1_m
import pulses2_separate as p2_s
import pulses2_2mixed as p2_2m
import pulses3_separate as p3_s
import pulses3_2mixed as p3_2m
import pulses3_3mixed as p3_3m
import pulses4_separate as p4_s
import pulses4_2mixed as p4_2m
import pulses4_2_2mixed as p4_2_2m
import pulses4_3mixed as p4_3m
import pulses4_4mixed as p4_4m

from PyQt5 import QtCore
from matplotlib.backends.qt_compat import QtWidgets


class Ui_PIP_Decomp_Fitter(QtWidgets.QWidget):
    def setupUi(self, PIP_Decomp_Fitter):
        PIP_Decomp_Fitter.setObjectName("PIP_Decomp_Fitter")
        PIP_Decomp_Fitter.resize(850, 720)

        self.filename = ''
        self.f_unit = "GHz"
        self.b_unit = "SFU"
        self.t_unit = "s"



        self.centralwidget = QtWidgets.QWidget(PIP_Decomp_Fitter)
        self.centralwidget.setObjectName("centralwidget")

#figure
        layout1 = QtWidgets.QGridLayout(self.centralwidget)
        self.figure=Figure(figsize=(5.5, 3.5))
        self.static_canvas = FigureCanvas(self.figure)

        self.static_canvas.setSizePolicy(
                                   QtWidgets.QSizePolicy.Fixed,
                                   QtWidgets.QSizePolicy.Fixed)
        self.static_canvas.updateGeometry()
        spacerItem1 = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        spacerItem2 = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        spacerItem3 = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)


        layout1.addWidget(self.static_canvas,0,0)
        layout1.addItem(spacerItem1,0,1)
        layout1.addItem(spacerItem2,1,0)
        layout1.addItem(spacerItem3,1,1)



        self._static_ax = self.static_canvas.figure.subplots()


        self.current_model_results = np.empty([12,18])
        self.current_model_results[:,:] = np.nan

        self.current_model_flag= False


        self.inp_g_a_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_a_1.setGeometry(QtCore.QRect(650, 30, 60, 31))
        self.inp_g_a_1.setObjectName("inp_g_a_1")
        self.inp_g_a_1.setText('1')

        self.inp_min_a_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_a_1.setGeometry(QtCore.QRect(730, 30, 31, 31))
        self.inp_min_a_1.setObjectName("inp_min_a_1")
        self.inp_min_a_1.setText('0.1')

        self.inp_max_a_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_a_1.setGeometry(QtCore.QRect(790, 30, 31, 31))
        self.inp_max_a_1.setObjectName("inp_max_a_1")
        self.inp_max_a_1.setText('500')


        self.inp_g_a_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_a_2.setGeometry(QtCore.QRect(650, 180, 60, 31))
        self.inp_g_a_2.setObjectName("inp_g_a_2")
        self.inp_g_a_2.setText('1')

        self.inp_min_a_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_a_2.setGeometry(QtCore.QRect(730, 180, 31, 31))
        self.inp_min_a_2.setObjectName("inp_min_a_2")
        self.inp_min_a_2.setText('0.1')

        self.inp_max_a_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_a_2.setGeometry(QtCore.QRect(790, 180, 31, 31))
        self.inp_max_a_2.setObjectName("inp_max_a_2")
        self.inp_max_a_2.setText('50')


        self.inp_g_a_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_a_3.setGeometry(QtCore.QRect(650, 320, 60, 31))
        self.inp_g_a_3.setObjectName("inp_g_a_3")
        self.inp_g_a_3.setText('1')

        self.inp_min_a_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_a_3.setGeometry(QtCore.QRect(730, 320, 31, 31))
        self.inp_min_a_3.setObjectName("inp_min_a_3")
        self.inp_min_a_3.setText('0.1')

        self.inp_max_a_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_a_3.setGeometry(QtCore.QRect(790, 320, 31, 31))
        self.inp_max_a_3.setObjectName("inp_max_a_3")
        self.inp_max_a_3.setText('50')


        self.inp_g_a_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_a_4.setGeometry(QtCore.QRect(650, 470, 60, 31))
        self.inp_g_a_4.setObjectName("inp_g_a_4")
        self.inp_g_a_4.setText('1')

        self.inp_min_a_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_a_4.setGeometry(QtCore.QRect(730, 470, 31, 31))
        self.inp_min_a_4.setObjectName("inp_min_a_4")
        self.inp_min_a_4.setText('0.1')

        self.inp_max_a_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_a_4.setGeometry(QtCore.QRect(790, 470, 31, 31))
        self.inp_max_a_4.setObjectName("inp_max_a_4")
        self.inp_max_a_4.setText('50')



        self.inp_g_mu_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_mu_1.setGeometry(QtCore.QRect(650, 60, 60, 31))
        self.inp_g_mu_1.setObjectName("inp_g_mu_1")
        self.inp_g_mu_1.setText('5')

        self.inp_min_mu_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_mu_1.setGeometry(QtCore.QRect(730, 60, 31, 31))
        self.inp_min_mu_1.setObjectName("inp_min_mu_1")
        self.inp_min_mu_1.setText('0.1')

        self.inp_max_mu_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_mu_1.setGeometry(QtCore.QRect(790, 60, 31, 31))
        self.inp_max_mu_1.setObjectName("inp_max_mu_1")
        self.inp_max_mu_1.setText('200')


        self.inp_g_mu_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_mu_2.setGeometry(QtCore.QRect(650, 210, 60, 31))
        self.inp_g_mu_2.setObjectName("inp_g_mu_2")
        self.inp_g_mu_2.setText('15')

        self.inp_min_mu_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_mu_2.setGeometry(QtCore.QRect(730, 210, 31, 31))
        self.inp_min_mu_2.setObjectName("inp_min_mu_2")
        self.inp_min_mu_2.setText('0.1')

        self.inp_max_mu_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_mu_2.setGeometry(QtCore.QRect(790, 210, 31, 31))
        self.inp_max_mu_2.setObjectName("inp_max_mu_2")
        self.inp_max_mu_2.setText('100')

        self.inp_g_mu_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_mu_3.setGeometry(QtCore.QRect(650, 350, 60, 31))
        self.inp_g_mu_3.setObjectName("inp_g_mu_3")
        self.inp_g_mu_3.setText('20')

        self.inp_min_mu_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_mu_3.setGeometry(QtCore.QRect(730, 350, 31, 31))
        self.inp_min_mu_3.setObjectName("inp_min_mu_3")
        self.inp_min_mu_3.setText('0.1')

        self.inp_max_mu_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_mu_3.setGeometry(QtCore.QRect(790, 350, 31, 31))
        self.inp_max_mu_3.setObjectName("inp_max_mu_3")
        self.inp_max_mu_3.setText('100')


        self.inp_g_mu_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_mu_4.setGeometry(QtCore.QRect(650, 500, 60,  31))
        self.inp_g_mu_4.setObjectName("inp_g_mu_4")
        self.inp_g_mu_4.setText('25')

        self.inp_min_mu_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_mu_4.setGeometry(QtCore.QRect(730, 500, 31, 31))
        self.inp_min_mu_4.setObjectName("inp_min_mu_4")
        self.inp_min_mu_4.setText('0.1')

        self.inp_max_mu_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_mu_4.setGeometry(QtCore.QRect(790, 500, 31, 31))
        self.inp_max_mu_4.setObjectName("inp_max_mu_4")
        self.inp_max_mu_4.setText('100')


        self.inp_g_sig_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_sig_1.setGeometry(QtCore.QRect(650, 90, 60, 31))
        self.inp_g_sig_1.setObjectName("inp_g_sig_1")
        self.inp_g_sig_1.setText('2')

        self.inp_min_sig_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_sig_1.setGeometry(QtCore.QRect(730, 90, 31, 31))
        self.inp_min_sig_1.setObjectName("inp_min_sig_1")
        self.inp_min_sig_1.setText('0.1')

        self.inp_max_sig_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_sig_1.setGeometry(QtCore.QRect(790, 90, 31, 31))
        self.inp_max_sig_1.setObjectName("inp_max_sig_1")
        self.inp_max_sig_1.setText('100')


        self.inp_g_sig_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_sig_2.setGeometry(QtCore.QRect(650, 240, 60, 31))
        self.inp_g_sig_2.setObjectName("inp_g_sig_2")
        self.inp_g_sig_2.setText('2')

        self.inp_min_sig_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_sig_2.setGeometry(QtCore.QRect(730, 240, 31, 31))
        self.inp_min_sig_2.setObjectName("inp_min_sig_2")
        self.inp_min_sig_2.setText('0.1')

        self.inp_max_sig_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_sig_2.setGeometry(QtCore.QRect(790, 240, 31, 31))
        self.inp_max_sig_2.setObjectName("inp_max_sig_2")
        self.inp_max_sig_2.setText('200')


        self.inp_g_sig_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_sig_3.setGeometry(QtCore.QRect(650, 380, 60, 31))
        self.inp_g_sig_3.setObjectName("inp_g_sig_3")
        self.inp_g_sig_3.setText('2')

        self.inp_min_sig_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_sig_3.setGeometry(QtCore.QRect(730, 380, 31, 31))
        self.inp_min_sig_3.setObjectName("inp_min_sig_3")
        self.inp_min_sig_3.setText('0.1')

        self.inp_max_sig_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_sig_3.setGeometry(QtCore.QRect(790, 380, 31, 31))
        self.inp_max_sig_3.setObjectName("inp_max_sig_3")
        self.inp_max_sig_3.setText('100')


        self.inp_g_sig_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_sig_4.setGeometry(QtCore.QRect(650, 530, 60, 31))
        self.inp_g_sig_4.setObjectName("inp_g_sig_4")
        self.inp_g_sig_4.setText('2')

        self.inp_min_sig_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_sig_4.setGeometry(QtCore.QRect(730, 530, 31, 31))
        self.inp_min_sig_4.setObjectName("inp_min_sig_4")
        self.inp_min_sig_4.setText('0.1')

        self.inp_max_sig_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_sig_4.setGeometry(QtCore.QRect(790, 530, 31, 31))
        self.inp_max_sig_4.setObjectName("inp_max_sig_4")
        self.inp_max_sig_4.setText('100')

        self.inp_g_tau_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_tau_1.setGeometry(QtCore.QRect(650, 120, 60, 31))
        self.inp_g_tau_1.setObjectName("inp_g_tau_1")
        self.inp_g_tau_1.setText('5')

        self.inp_min_tau_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_tau_1.setGeometry(QtCore.QRect(730, 120, 31, 31))
        self.inp_min_tau_1.setObjectName("inp_min_tau_1")
        self.inp_min_tau_1.setText('0.1')

        self.inp_max_tau_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_tau_1.setGeometry(QtCore.QRect(790, 120, 31, 31))
        self.inp_max_tau_1.setObjectName("inp_max_tau_1")
        self.inp_max_tau_1.setText('500')


        self.inp_g_tau_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_tau_2.setGeometry(QtCore.QRect(650, 270, 60, 31))
        self.inp_g_tau_2.setObjectName("inp_g_tau_2")
        self.inp_g_tau_2.setText('5')

        self.inp_min_tau_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_tau_2.setGeometry(QtCore.QRect(730, 270, 31, 31))
        self.inp_min_tau_2.setObjectName("inp_min_tau_2")
        self.inp_min_tau_2.setText('1')

        self.inp_max_tau_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_tau_2.setGeometry(QtCore.QRect(790, 270, 31, 31))
        self.inp_max_tau_2.setObjectName("inp_max_tau_2")
        self.inp_max_tau_2.setText('500')


        self.inp_g_tau_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_tau_3.setGeometry(QtCore.QRect(650, 410, 60, 31))
        self.inp_g_tau_3.setObjectName("inp_g_tau_3")
        self.inp_g_tau_3.setText('5')

        self.inp_min_tau_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_tau_3.setGeometry(QtCore.QRect(730, 410, 31, 31))
        self.inp_min_tau_3.setObjectName("inp_min_tau_3")
        self.inp_min_tau_3.setText('0.1')

        self.inp_max_tau_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_tau_3.setGeometry(QtCore.QRect(790, 410, 31, 31))
        self.inp_max_tau_3.setObjectName("inp_max_tau_3")
        self.inp_max_tau_3.setText('100')


        self.inp_g_tau_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_tau_4.setGeometry(QtCore.QRect(650, 560, 60, 31))
        self.inp_g_tau_4.setObjectName("inp_g_tau_4")
        self.inp_g_tau_4.setText('5')

        self.inp_min_tau_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_tau_4.setGeometry(QtCore.QRect(730, 560, 31, 31))
        self.inp_min_tau_4.setObjectName("inp_min_tau_4")
        self.inp_min_tau_4.setText('1')

        self.inp_max_tau_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_tau_4.setGeometry(QtCore.QRect(790, 560, 31, 31))
        self.inp_max_tau_4.setObjectName("inp_max_tau_4")
        self.inp_max_tau_4.setText('100')

        self.inp_g_w_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_w_1.setGeometry(QtCore.QRect(650, 620, 60, 31))
        self.inp_g_w_1.setObjectName("inp_g_sig_4")
        self.inp_g_w_1.setText('0.5')

        self.inp_min_w_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_w_1.setGeometry(QtCore.QRect(730, 620, 31, 31))
        self.inp_min_w_1.setObjectName("inp_min_sig_4")
        self.inp_min_w_1.setText('0')

        self.inp_max_w_1 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_w_1.setGeometry(QtCore.QRect(790, 620, 31, 31))
        self.inp_max_w_1.setObjectName("inp_max_sig_4")
        self.inp_max_w_1.setText('1')

        self.inp_g_w_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_g_w_2.setGeometry(QtCore.QRect(650, 650, 60, 31))
        self.inp_g_w_2.setObjectName("inp_g_tau_4")
        self.inp_g_w_2.setText('0.5')

        self.inp_min_w_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_min_w_2.setGeometry(QtCore.QRect(730, 650, 31, 31))
        self.inp_min_w_2.setObjectName("inp_min_tau_4")
        self.inp_min_w_2.setText('0')

        self.inp_max_w_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_max_w_2.setGeometry(QtCore.QRect(790, 650, 31, 31))
        self.inp_max_w_2.setObjectName("inp_max_tau_4")
        self.inp_max_w_2.setText('1')




        self.Label_a_1 = QtWidgets.QLabel(self.centralwidget)
        self.Label_a_1.setGeometry(QtCore.QRect(625, 35, 20, 20))
        self.Label_a_1.setObjectName("Label_a_1")
        self.Label_a_2 = QtWidgets.QLabel(self.centralwidget)
        self.Label_a_2.setGeometry(QtCore.QRect(625, 175, 20, 20))
        self.Label_a_2.setObjectName("Label_a_2")
        self.Label_a_3 = QtWidgets.QLabel(self.centralwidget)
        self.Label_a_3.setGeometry(QtCore.QRect(625, 325, 20, 20))
        self.Label_a_3.setObjectName("Label_a_3")
        self.Label_a_4 = QtWidgets.QLabel(self.centralwidget)
        self.Label_a_4.setGeometry(QtCore.QRect(625, 475, 20, 20))
        self.Label_a_4.setObjectName("Label_a_4")
        self.Label_mu_1 = QtWidgets.QLabel(self.centralwidget)
        self.Label_mu_1.setGeometry(QtCore.QRect(625, 65, 20, 20))
        self.Label_mu_1.setObjectName("Label_mu_1")
        self.Label_mu_2 = QtWidgets.QLabel(self.centralwidget)
        self.Label_mu_2.setGeometry(QtCore.QRect(625, 205, 20, 20))
        self.Label_mu_2.setObjectName("Label_mu_2")
        self.Label_mu_3 = QtWidgets.QLabel(self.centralwidget)
        self.Label_mu_3.setGeometry(QtCore.QRect(625, 355, 20, 20))
        self.Label_mu_3.setObjectName("Label_mu_3")
        self.Label_mu_4 = QtWidgets.QLabel(self.centralwidget)
        self.Label_mu_4.setGeometry(QtCore.QRect(625, 505, 20, 20))
        self.Label_mu_4.setObjectName("Label_mu_4")
        self.Label_sig_1 = QtWidgets.QLabel(self.centralwidget)
        self.Label_sig_1.setGeometry(QtCore.QRect(625, 95, 20, 20))
        self.Label_sig_1.setObjectName("Label_sig_1")
        self.Label_sig_2 = QtWidgets.QLabel(self.centralwidget)
        self.Label_sig_2.setGeometry(QtCore.QRect(625, 235, 20, 20))
        self.Label_sig_2.setObjectName("Label_sig_2")
        self.Label_sig_3 = QtWidgets.QLabel(self.centralwidget)
        self.Label_sig_3.setGeometry(QtCore.QRect(625, 385, 20, 20))
        self.Label_sig_3.setObjectName("Label_sig_3")
        self.Label_sig_4 = QtWidgets.QLabel(self.centralwidget)
        self.Label_sig_4.setGeometry(QtCore.QRect(625, 535, 20, 20))
        self.Label_sig_4.setObjectName("Label_sig_4")
        self.Label_tau_1 = QtWidgets.QLabel(self.centralwidget)
        self.Label_tau_1.setGeometry(QtCore.QRect(625, 125, 20, 20))
        self.Label_tau_1.setObjectName("Label_tau_1")
        self.Label_tau_2 = QtWidgets.QLabel(self.centralwidget)
        self.Label_tau_2.setGeometry(QtCore.QRect(625, 275, 20, 20))
        self.Label_tau_2.setObjectName("Label_tau_2")
        self.Label_tau_3 = QtWidgets.QLabel(self.centralwidget)
        self.Label_tau_3.setGeometry(QtCore.QRect(625, 415, 20, 20))
        self.Label_tau_3.setObjectName("Label_tau_3")
        self.Label_tau_4 = QtWidgets.QLabel(self.centralwidget)
        self.Label_tau_4.setGeometry(QtCore.QRect(625, 565, 20, 20))
        self.Label_tau_4.setObjectName("Label_tau_4")
        self.Label_guess = QtWidgets.QLabel(self.centralwidget)
        self.Label_guess.setGeometry(QtCore.QRect(650, 0, 41, 21))
        self.Label_guess.setObjectName("Label_guess")
        self.Label_min = QtWidgets.QLabel(self.centralwidget)
        self.Label_min.setGeometry(QtCore.QRect(730, 0, 41, 21))
        self.Label_min.setObjectName("Label_min")
        self.Label_max = QtWidgets.QLabel(self.centralwidget)
        self.Label_max.setGeometry(QtCore.QRect(790, 0, 41, 21))
        self.Label_max.setObjectName("Label_max")
        self.label_pulse_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_pulse_1.setGeometry(QtCore.QRect(610, 10, 55, 16))
        self.label_pulse_1.setObjectName("label_pulse_1")
        self.label_pulse_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_pulse_2.setGeometry(QtCore.QRect(610, 160, 55, 16))
        self.label_pulse_2.setObjectName("label_pulse_2")
        self.label_pulse_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_pulse_3.setGeometry(QtCore.QRect(610, 310, 55, 16))
        self.label_pulse_3.setObjectName("label_pulse_3")
        self.label_pulse_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_pulse_4.setGeometry(QtCore.QRect(610, 460, 55, 16))
        self.label_pulse_4.setObjectName("label_pulse_4")
        self.label_weights = QtWidgets.QLabel(self.centralwidget)
        self.label_weights.setGeometry(QtCore.QRect(610, 600, 55, 16))

        self.Label_w_1 = QtWidgets.QLabel(self.centralwidget)
        self.Label_w_1.setGeometry(QtCore.QRect(625, 620, 20, 20))
        self.Label_w_1.setObjectName("Label_w_1")
        self.Label_w_2 = QtWidgets.QLabel(self.centralwidget)
        self.Label_w_2.setGeometry(QtCore.QRect(615, 650, 25, 20))
        self.Label_w_2.setObjectName("Label_w_2")

        self.label_weights.setObjectName("label_weights")
        self.label_freq_range = QtWidgets.QLabel(self.centralwidget)
        self.label_freq_range.setGeometry(QtCore.QRect(400, 410, 105, 18))
        self.label_freq_range.setObjectName("label_freq_range")
        self.label_time_range = QtWidgets.QLabel(self.centralwidget)
        self.label_time_range.setGeometry(QtCore.QRect(485, 410, 83, 18))
        self.label_time_range.setObjectName("label_time_range")
        self.label_select_freq = QtWidgets.QLabel(self.centralwidget)
        self.label_select_freq.setGeometry(QtCore.QRect(340, 410, 83, 18))
        self.label_select_freq.setObjectName("label_select_freq")

        self.label_freq = QtWidgets.QLabel(self.centralwidget)
        self.label_freq.setGeometry(QtCore.QRect(340, 390, 83, 18))
        self.label_freq.setObjectName("label_freq")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 550, 71, 16))
        self.label_2.setObjectName("label_2")

        self.label_log_scale= QtWidgets.QLabel(self.centralwidget)
        self.label_log_scale.setGeometry(QtCore.QRect(50, 390, 81, 20))
        self.label_log_scale.setObjectName("Log_Scale")

        self.inp_samp_freq = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_samp_freq.setGeometry(QtCore.QRect(340, 430, 31, 31))
        self.inp_samp_freq.setObjectName("inp_samp_freq")
        self.inp_samp_freq.setText('6')

        self.modee_log_scale_check = QtWidgets.QCheckBox(self.centralwidget)
        self.modee_log_scale_check .setGeometry(QtCore.QRect(30, 390, 81, 20))
        self.modee_log_scale_check .setObjectName("modee_log_scale_check")
        self.modee_log_scale_check .setChecked(False)


        self.modee_radioButton_1p = QtWidgets.QRadioButton(self.centralwidget)
        self.modee_radioButton_1p.setGeometry(QtCore.QRect(30, 580, 81, 20))
        self.modee_radioButton_1p.setObjectName("modee_radioButton_1p")
        self.modee_radioButton_1p.setChecked(True)

        self.modee_radioButton_1p_m = QtWidgets.QRadioButton(self.centralwidget)
        self.modee_radioButton_1p_m.setGeometry(QtCore.QRect(120, 580, 81, 20))
        self.modee_radioButton_1p_m.setObjectName("modee_radioButton_1p_m")

        self.modee_radioButton_2p_s = QtWidgets.QRadioButton(self.centralwidget)
        self.modee_radioButton_2p_s.setGeometry(QtCore.QRect(210, 580, 81, 20))
        self.modee_radioButton_2p_s.setObjectName("modee_radioButton_2p_s")

        self.modee_radioButton_2p_m = QtWidgets.QRadioButton(self.centralwidget)
        self.modee_radioButton_2p_m.setGeometry(QtCore.QRect(310, 580, 81, 20))
        self.modee_radioButton_2p_m.setObjectName("modee_radioButton_2p_m")

        self.modee_radioButton_3p_s = QtWidgets.QRadioButton(self.centralwidget)
        self.modee_radioButton_3p_s.setGeometry(QtCore.QRect(410, 580, 81, 20))
        self.modee_radioButton_3p_s.setObjectName("modee_radioButton_3p_s")

        self.modee_radioButton_3p_2m = QtWidgets.QRadioButton(self.centralwidget)
        self.modee_radioButton_3p_2m.setGeometry(QtCore.QRect(510, 580, 81, 20))
        self.modee_radioButton_3p_2m.setObjectName("modee_radioButton_3p_2m")

        self.modee_radioButton_4p_3m = QtWidgets.QRadioButton(self.centralwidget)
        self.modee_radioButton_4p_3m.setGeometry(QtCore.QRect(410, 610, 81, 20))
        self.modee_radioButton_4p_3m.setObjectName("modee_radioButton_4p_3m")

        self.modee_radioButton_3p_3m = QtWidgets.QRadioButton(self.centralwidget)
        self.modee_radioButton_3p_3m.setGeometry(QtCore.QRect(30, 610, 81, 20))
        self.modee_radioButton_3p_3m.setObjectName("modee_radioButton_3p_3m")

        self.modee_radioButton_4p_s = QtWidgets.QRadioButton(self.centralwidget)
        self.modee_radioButton_4p_s.setGeometry(QtCore.QRect(120, 610, 81, 20))
        self.modee_radioButton_4p_s.setObjectName("modee_radioButton_4p_s")

        self.modee_radioButton_4p_2_2m = QtWidgets.QRadioButton(self.centralwidget)
        self.modee_radioButton_4p_2_2m.setGeometry(QtCore.QRect(310, 610, 81, 20))
        self.modee_radioButton_4p_2_2m.setObjectName("modee_radioButton_4p_2_2m")

        self.modee_radioButton_4p_2m = QtWidgets.QRadioButton(self.centralwidget)
        self.modee_radioButton_4p_2m.setGeometry(QtCore.QRect(210, 610, 81, 20))
        self.modee_radioButton_4p_2m.setObjectName("modee_radioButton_4p_2m")

        self.modee_radioButton_4p_4m = QtWidgets.QRadioButton(self.centralwidget)
        self.modee_radioButton_4p_4m.setGeometry(QtCore.QRect(510, 610, 81, 20))
        self.modee_radioButton_4p_4m.setObjectName("modee_radioButton_4p_4m")


        self.inp_Freq_range_min = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_Freq_range_min.setGeometry(QtCore.QRect(400, 430, 31, 31))
        self.inp_Freq_range_min.setObjectName("inp_Freq_range_min")
        self.inp_Freq_range_min.setText('0')

        self.inp_Freq_range_max = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_Freq_range_max.setGeometry(QtCore.QRect(435, 430, 31, 31))
        self.inp_Freq_range_max.setObjectName("inp_Freq_range_max")
        self.inp_Freq_range_max.setText('35')

        self.inp_Time_range_min = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_Time_range_min.setGeometry(QtCore.QRect(485, 430, 31, 31))
        self.inp_Time_range_min.setObjectName("inp_Time_range_min")
        self.inp_Time_range_min.setText('0')

        self.inp_Time_range_max = QtWidgets.QTextEdit(self.centralwidget)
        self.inp_Time_range_max.setGeometry(QtCore.QRect(520, 430, 31, 31))
        self.inp_Time_range_max.setObjectName("inp_Time_range_max")
        self.inp_Time_range_max.setText('200')

        self.pushButton__plot_guess = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: press_plot_guess(self))
        self.pushButton__plot_guess.setGeometry(QtCore.QRect(20, 430, 131, 41))
        self.pushButton__plot_guess.setObjectName("pushButton__plot_guess")

        self.pushButton_plot_samp_freq = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: press_plot_samp_freq(self))
        self.pushButton_plot_samp_freq.setGeometry(QtCore.QRect(20, 490, 131, 41))
        self.pushButton_plot_samp_freq.setObjectName("pushButton_plot_samp_freq")

        self.pushButton_Suggest_Model = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: press_suggest_model(self))
        self.pushButton_Suggest_Model.setGeometry(QtCore.QRect(170, 430, 131, 41))
        self.pushButton_Suggest_Model.setObjectName("pushButton_Suggest_Model")

        self.pushButton_Suggest_Prams = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: press_suggest_params(self))
        self.pushButton_Suggest_Prams.setGeometry(QtCore.QRect(170, 490, 131, 41))
        self.pushButton_Suggest_Prams.setObjectName("pushButton_Suggest_Prams")

        self.pushButton_Fit_Current_Guess = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: press_Fit_Current_Guess(self))
        self.pushButton_Fit_Current_Guess.setGeometry(QtCore.QRect(340, 490, 211, 41))
        self.pushButton_Fit_Current_Guess.setObjectName("pushButton_Fit_Current_Guess")

        self.pushButton_New_File = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: press_New_File(self))
        self.pushButton_New_File.setGeometry(QtCore.QRect(10, 10, 70, 25))
        self.pushButton_New_File.setObjectName("pushButton_New_File")


        self.inp_g_a_1.raise_()
        self.inp_g_a_2.raise_()
        self.inp_g_a_3.raise_()
        self.inp_min_a_1.raise_()
        self.inp_min_a_2.raise_()
        self.inp_min_a_3.raise_()
        self.inp_max_a_1.raise_()
        self.inp_max_a_2.raise_()
        self.inp_max_a_3.raise_()
        self.inp_g_a_4.raise_()
        self.inp_max_a_4.raise_()
        self.inp_min_a_4.raise_()
        self.inp_g_mu_1.raise_()
        self.inp_min_mu_1.raise_()
        self.inp_max_mu_1.raise_()
        self.inp_max_mu_2.raise_()
        self.inp_g_mu_2.raise_()
        self.inp_min_mu_2.raise_()
        self.inp_max_mu_3.raise_()
        self.inp_min_mu_3.raise_()
        self.inp_g_mu_3.raise_()
        self.inp_g_mu_4.raise_()
        self.inp_max_mu_4.raise_()
        self.inp_min_mu_4.raise_()
        self.inp_g_sig_1.raise_()
        self.inp_min_sig_1.raise_()
        self.inp_max_sig_1.raise_()
        self.inp_g_sig_2.raise_()
        self.inp_min_sig_2.raise_()
        self.inp_max_sig_2.raise_()
        self.inp_g_sig_3.raise_()
        self.inp_max_sig_3.raise_()
        self.inp_min_sig_3.raise_()
        self.inp_g_sig_4.raise_()
        self.inp_min_sig_4.raise_()
        self.inp_max_sig_4.raise_()
        self.inp_max_tau_1.raise_()
        self.inp_min_tau_1.raise_()
        self.inp_g_tau_1.raise_()
        self.inp_max_tau_2.raise_()
        self.inp_g_tau_2.raise_()
        self.inp_min_tau_2.raise_()
        self.inp_g_tau_3.raise_()
        self.inp_min_tau_3.raise_()
        self.inp_max_tau_3.raise_()
        self.inp_min_tau_4.raise_()
        self.inp_max_tau_4.raise_()
        self.inp_g_tau_4.raise_()
        self.inp_g_w_1.raise_()
        self.inp_min_w_1.raise_()
        self.inp_max_w_1.raise_()
        self.inp_min_w_2.raise_()
        self.inp_max_w_2.raise_()
        self.inp_g_w_2.raise_()


        self.Label_a_1.raise_()
        self.Label_a_2.raise_()
        self.Label_a_3.raise_()
        self.Label_a_4.raise_()
        self.Label_mu_1.raise_()
        self.Label_mu_2.raise_()
        self.Label_mu_3.raise_()
        self.Label_mu_4.raise_()
        self.Label_sig_1.raise_()
        self.Label_sig_2.raise_()
        self.Label_sig_3.raise_()
        self.Label_sig_4.raise_()
        self.Label_tau_1.raise_()
        self.Label_tau_2.raise_()
        self.Label_tau_3.raise_()
        self.Label_tau_4.raise_()
        self.Label_guess.raise_()
        self.Label_min.raise_()
        self.Label_max.raise_()
        self.label_pulse_1.raise_()
        self.label_pulse_2.raise_()
        self.label_pulse_3.raise_()
        self.label_pulse_4.raise_()
        self.label_weights.raise_()
        self.label_select_freq.raise_()
        self.label_freq.raise_()
        self.label_2.raise_()
        self.label_freq_range.raise_()
        self.label_time_range.raise_()
        self.Label_w_1.raise_()
        self.Label_w_2.raise_()

        self.pushButton__plot_guess.raise_()
        self.pushButton_plot_samp_freq.raise_()
        self.pushButton_Suggest_Model.raise_()
        self.pushButton_Suggest_Prams.raise_()
        self.inp_samp_freq.raise_()
        self.pushButton_Fit_Current_Guess.raise_()
        self.pushButton_New_File.raise_()

        self.modee_log_scale_check.raise_()
        self.modee_radioButton_1p.raise_()
        self.modee_radioButton_1p_m.raise_()
        self.modee_radioButton_2p_s.raise_()
        self.modee_radioButton_2p_m.raise_()
        self.modee_radioButton_3p_s.raise_()
        self.modee_radioButton_3p_2m.raise_()
        self.modee_radioButton_4p_3m.raise_()
        self.modee_radioButton_3p_3m.raise_()
        self.modee_radioButton_4p_s.raise_()
        self.modee_radioButton_4p_2_2m.raise_()
        self.modee_radioButton_4p_2m.raise_()
        self.modee_radioButton_4p_4m.raise_()

        #self.graphicsView_plot.raise_()


        self.inp_Freq_range_min.raise_()
        self.inp_Freq_range_max.raise_()
        self.inp_Time_range_min.raise_()
        self.inp_Time_range_max.raise_()

        PIP_Decomp_Fitter.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(PIP_Decomp_Fitter)
        self.statusbar.setObjectName("statusbar")
        PIP_Decomp_Fitter.setStatusBar(self.statusbar)



        def check_guess():
            guess = [float(self.inp_g_a_1.toPlainText()),  float(self.inp_g_mu_1.toPlainText()), float(self.inp_g_sig_1.toPlainText()), float(self.inp_g_tau_1.toPlainText()),
                     float(self.inp_g_a_2.toPlainText()),  float(self.inp_g_mu_2.toPlainText()), float(self.inp_g_sig_2.toPlainText()), float(self.inp_g_tau_2.toPlainText()),
                     float(self.inp_g_a_3.toPlainText()),  float(self.inp_g_mu_3.toPlainText()), float(self.inp_g_sig_3.toPlainText()), float(self.inp_g_tau_3.toPlainText()),
                     float(self.inp_g_a_4.toPlainText()),  float(self.inp_g_mu_4.toPlainText()), float(self.inp_g_sig_4.toPlainText()), float(self.inp_g_tau_4.toPlainText()),
                     float(self.inp_g_w_1.toPlainText()),  float(self.inp_g_w_2.toPlainText())]

            min_g = [float(self.inp_min_a_1.toPlainText()),  float(self.inp_min_mu_1.toPlainText()), float(self.inp_min_sig_1.toPlainText()), float(self.inp_min_tau_1.toPlainText()),
                     float(self.inp_min_a_2.toPlainText()),  float(self.inp_min_mu_2.toPlainText()), float(self.inp_min_sig_2.toPlainText()), float(self.inp_min_tau_2.toPlainText()),
                     float(self.inp_min_a_3.toPlainText()),  float(self.inp_min_mu_3.toPlainText()), float(self.inp_min_sig_3.toPlainText()), float(self.inp_min_tau_3.toPlainText()),
                     float(self.inp_min_a_4.toPlainText()),  float(self.inp_min_mu_4.toPlainText()), float(self.inp_min_sig_4.toPlainText()), float(self.inp_min_tau_4.toPlainText()),
                     float(self.inp_min_w_1.toPlainText()),  float(self.inp_min_w_2.toPlainText())]

            max_g = [float(self.inp_max_a_1.toPlainText()),  float(self.inp_max_mu_1.toPlainText()), float(self.inp_max_sig_1.toPlainText()), float(self.inp_max_tau_1.toPlainText()),
                     float(self.inp_max_a_2.toPlainText()),  float(self.inp_max_mu_2.toPlainText()), float(self.inp_max_sig_2.toPlainText()), float(self.inp_max_tau_2.toPlainText()),
                     float(self.inp_max_a_3.toPlainText()),  float(self.inp_max_mu_3.toPlainText()), float(self.inp_max_sig_3.toPlainText()), float(self.inp_max_tau_3.toPlainText()),
                     float(self.inp_max_a_4.toPlainText()),  float(self.inp_max_mu_4.toPlainText()), float(self.inp_max_sig_4.toPlainText()), float(self.inp_max_tau_4.toPlainText()),
                     float(self.inp_max_w_1.toPlainText()),  float(self.inp_max_w_2.toPlainText())]
            return guess, min_g, max_g





        def press_plot_guess(self):


            measured_signal2, measured_signal2e, p_times = check_sample_data(self)

            t_i = int(self.inp_Time_range_min.toPlainText())
            t_f = int(self.inp_Time_range_max.toPlainText())
            s_l= int(p_times[t_f] - p_times[t_i])
            time = np.arange(1, s_l)
            guess, min_g, max_g = check_guess()

            if self.modee_log_scale_check.isChecked(): self._static_ax.set_yscale("log")
            if self.modee_log_scale_check.isChecked()==False: self._static_ax.set_yscale("linear")


            if self.modee_radioButton_1p.isChecked():
                model= p1.model(time, guess[0], guess[1], guess[2], guess[3])
                pulse1 = guess[0] * np.exp(-.5 * ((time - guess[1]) / guess[2]) ** 2)


                self._static_ax.plot(pulse1 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 1",color='black')



                self._static_ax.plot(model[0:s_l]+ np.min(np.abs(measured_signal2)), color='black', label="Fit")
                self._static_ax.set_xlabel('Time (s)'), plt.ylabel("Region Flux (SFU)")
                #self._static_ax.set_yscale('log')

            if self.modee_radioButton_1p_m.isChecked():
                model = p1_m.model(time, guess[0], guess[1], guess[2], guess[3],guess[7],guess[16])
                pulse1 = guess[0] * np.exp(-.5 * ((time - guess[1]) / guess[2]) ** 2)

                self._static_ax.plot(pulse1 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 1", color='black')

                # plt.yscale("log")
                self._static_ax.plot(model[0:s_l] + np.min(np.abs(measured_signal2)), color='black', label="Fit")
                self._static_ax.set_xlabel('Time (s)'), plt.ylabel("Region Flux (SFU)")


            if self.modee_radioButton_2p_s.isChecked():
                model= p2_s.model(time, guess[0],guess[1],guess[2],guess[3],guess[4],guess[5],guess[6],guess[7])
                pulse1 = guess[0] * np.exp(-.5 * ((time - guess[1]) / guess[2]) ** 2)
                pulse2 = guess[4] * np.exp(-.5 * ((time - guess[5]) / guess[6]) ** 2)

                self._static_ax.plot(pulse1[0:s_l] + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 1", color='darkorange')
                self._static_ax.plot(pulse2[0:s_l] + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 2", color='navy')

                self._static_ax.plot(p2_s.model(time, guess[0], guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7])[0:s_l]+ np.min(np.abs(measured_signal2)),
                         label="Fit Flux P1", color='darkorange')
                self._static_ax.plot(p2_s.model(time, 0, guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7])[0:s_l]+ np.min(np.abs(measured_signal2)),
                         label="Fit Flux P2", color='navy')
                self._static_ax.plot(model[0:s_l] + np.min(np.abs(measured_signal2)), color='black', label="Fit")



            if self.modee_radioButton_2p_m.isChecked():
                model= p2_2m.model(time, guess[0],guess[1],guess[2],guess[3],guess[4],guess[5],guess[6],guess[7],guess[16])
                pulse1 = guess[0] * np.exp(-.5 * ((time - guess[1]) / guess[2]) ** 2)
                pulse2 = guess[4] * np.exp(-.5 * ((time - guess[5]) / guess[6]) ** 2)

                self._static_ax.plot(pulse1[0:s_l] + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 1", color='darkorange')
                self._static_ax.plot(pulse2[0:s_l] + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 2", color='navy')

                self._static_ax.plot(p2_2m.model(time,guess[0], guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7],guess[16])[0:s_l]+ np.min(np.abs(measured_signal2)),
                         label="Fit Flux P1", color='darkorange')
                self._static_ax.plot(p2_2m.model(time, 0, guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7],guess[16])[0:s_l]+ np.min(np.abs(measured_signal2)),
                         label="Fit Flux P2", color='navy')
                self._static_ax.plot(model[0:s_l] + np.min(np.abs(measured_signal2)), color='black', label="Fit")

            if self.modee_radioButton_3p_s.isChecked():
                model= p3_s.model(time, guess[0],guess[1],guess[2],guess[3],guess[4],guess[5],guess[6],guess[7],guess[8],guess[9],guess[10],guess[11])
                pulse1 = guess[0] * np.exp(-.5 * ((time - guess[1]) / guess[2]) ** 2)
                pulse2 = guess[4] * np.exp(-.5 * ((time - guess[5]) / guess[6]) ** 2)
                pulse3 = guess[8] * np.exp(-.5 * ((time - guess[9]) / guess[10]) ** 2)

                self._static_ax.plot(pulse1 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 1", color='darkorange')
                self._static_ax.plot(pulse2 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 2", color='navy')
                self._static_ax.plot(pulse3 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 3", color='darkgreen')

                self._static_ax.plot(
                    p3_s.model(time, guess[0], guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], 0, guess[9],
                          guess[10], guess[11])[0:s_l] + np.min(np.abs(measured_signal2)), label="Fit Flux P1", color='darkorange')
                self._static_ax.plot(
                    p3_s.model(time, 0, guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], 0, guess[9],
                          guess[10], guess[11])[0:s_l] + np.min(np.abs(measured_signal2)), label="Fit Flux P2", color='navy')
                self._static_ax.plot(
                    p3_s.model(time, 0, guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7],guess[8], guess[9],
                               guess[10], guess[11])[0:s_l] + np.min(np.abs(measured_signal2)), label="Fit Flux P3", color='darkgreen')
                self._static_ax.plot(model[0:s_l] + np.min(np.abs(measured_signal2)), color='black', label="Fit")

            if self.modee_radioButton_3p_2m.isChecked():
                model= p3_2m.model(time, guess[0],guess[1],guess[2],guess[3],guess[4],guess[5],guess[6],guess[7],guess[8],guess[9],guess[10],guess[11],guess[16])
                pulse1 = guess[0] * np.exp(-.5 * ((time - guess[1]) / guess[2]) ** 2)
                pulse2 = guess[4] * np.exp(-.5 * ((time - guess[5]) / guess[6]) ** 2)
                pulse3 = guess[8] * np.exp(-.5 * ((time - guess[9]) / guess[10]) ** 2)

                self._static_ax.plot(pulse1 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 1", color='darkorange')
                self._static_ax.plot(pulse2 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 2", color='navy')
                self._static_ax.plot(pulse3 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 3", color='darkgreen')

                self._static_ax.plot(
                    p3_2m.model(time, guess[0], guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], 0,guess[9],
                               guess[10], guess[11],guess[16])[0:s_l] + np.min(np.abs(measured_signal2)), label="Fit Flux P1",
                    color='darkorange')
                self._static_ax.plot(
                    p3_2m.model(time, 0, guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], 0,guess[9],
                               guess[10], guess[11],guess[16])[0:s_l] + np.min(np.abs(measured_signal2)), label="Fit Flux P2", color='navy')
                self._static_ax.plot(
                    p3_2m.model(time, 0, guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], guess[8],guess[9],
                               guess[10], guess[11],guess[16])[0:s_l] + np.min(np.abs(measured_signal2)), label="Fit Flux P3",
                    color='darkgreen')
                self._static_ax.plot(model[0:s_l] + np.min(np.abs(measured_signal2)), color='black', label="Fit")



            if self.modee_radioButton_3p_3m.isChecked():
                model= p3_3m.model(time, guess[0],guess[1],guess[2],guess[3],guess[4],guess[5],guess[6],guess[7],guess[8],guess[9],guess[10],guess[16])

                pulse1 = guess[0] * np.exp(-.5 * ((time - guess[1]) / guess[2]) ** 2)
                pulse2 = guess[4] * np.exp(-.5 * ((time - guess[5]) / guess[6]) ** 2)
                pulse3 = guess[8] * np.exp(-.5 * ((time - guess[9]) / guess[10]) ** 2)

                self._static_ax.plot(pulse1 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 1", color='darkorange')
                self._static_ax.plot(pulse2 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 2", color='navy')
                self._static_ax.plot(pulse3 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 3", color='darkgreen')

                self._static_ax.plot(
                    p3_3m.model(time, guess[0], guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], 0,guess[9],
                               guess[10], guess[16])[0:s_l] + np.min(np.abs(measured_signal2)), label="Fit Flux P1",color='darkorange')
                self._static_ax.plot(
                    p3_3m.model(time, 0, guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], 0, guess[9],
                               guess[10], guess[16])[0:s_l] + np.min(np.abs(measured_signal2)), label="Fit Flux P2", color='navy')
                self._static_ax.plot(
                    p3_3m.model(time, 0, guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], guess[8], guess[9],
                               guess[10], guess[16])[0:s_l] + np.min(np.abs(measured_signal2)), label="Fit Flux P3",color='darkgreen')
                self._static_ax.plot(model[0:s_l] + np.min(np.abs(measured_signal2)), color='black', label="Fit")

            if self.modee_radioButton_4p_s.isChecked():
                model= p4_s.model(time, guess[0],guess[1],guess[2],guess[3],guess[4],guess[5],guess[6],guess[7],guess[8],guess[9],guess[10],guess[11],guess[12],guess[13],guess[14],guess[15])
                pulse1 = guess[0] * np.exp(-.5 * ((time - guess[1]) / guess[2]) ** 2)
                pulse2 = guess[4] * np.exp(-.5 * ((time - guess[5]) / guess[6]) ** 2)
                pulse3 = guess[8] * np.exp(-.5 * ((time - guess[9]) / guess[10]) ** 2)
                pulse4 = guess[12] * np.exp(-.5 * ((time - guess[13]) / guess[14]) ** 2)

                self._static_ax.plot(pulse1 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 1", color='darkorange')
                self._static_ax.plot(pulse2 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 2", color='navy')
                self._static_ax.plot(pulse3 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 3", color='darkgreen')
                self._static_ax.plot(pulse4 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 4", color='dodgerblue')

                self._static_ax.plot(
                    p4_s.model(time, guess[0], guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], 0, guess[9],
                          guess[10], guess[11], 0, guess[13], guess[14], guess[15])[0:s_l] + np.min(np.abs(measured_signal2)),
                    label="Fit Flux P1", color='darkorange')
                self._static_ax.plot(
                    p4_s.model(time, 0, guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], 0, guess[9],
                          guess[10], guess[11], 0, guess[13], guess[14], guess[15])[0:s_l] + np.min(np.abs(measured_signal2)),
                    label="Fit Flux P2", color='navy')
                self._static_ax.plot(
                    p4_s.model(time, 0, guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], guess[8], guess[9],
                          guess[10], guess[11], 0, guess[13], guess[14], guess[15])[0:s_l] + np.min(np.abs(measured_signal2)),
                    label="Fit Flux P3", color = 'darkgreen')
                self._static_ax.plot(
                    p4_s.model(time, 0, guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], 0, guess[9],
                          guess[10], guess[11], guess[12], guess[13], guess[14], guess[15])[0:s_l] + np.min(np.abs(measured_signal2)), label="Fit Flux P4", color = 'dodgerblue')
                self._static_ax.plot(model[0:s_l] + np.min(np.abs(measured_signal2)), color='black', label="Fit")

            if self.modee_radioButton_4p_2m.isChecked():
                model= p4_2m.model(time, guess[0],guess[1],guess[2],guess[3],guess[4],guess[5],guess[6],guess[7],guess[8],guess[9],guess[10],guess[11],guess[12],guess[13],guess[14],guess[15],guess[16])
                pulse1 = guess[0] * np.exp(-.5 * ((time - guess[1]) / guess[2]) ** 2)
                pulse2 = guess[4] * np.exp(-.5 * ((time - guess[5]) / guess[6]) ** 2)
                pulse3 = guess[8] * np.exp(-.5 * ((time - guess[9]) / guess[10]) ** 2)
                pulse4 = guess[12] * np.exp(-.5 * ((time - guess[13]) / guess[14]) ** 2)

                self._static_ax.plot(pulse1 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 1", color='darkorange')
                self._static_ax.plot(pulse2 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 2", color='navy')
                self._static_ax.plot(pulse3 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 3", color='darkgreen')
                self._static_ax.plot(pulse4 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 4", color='dodgerblue')

                self._static_ax.plot(
                    p4_2m.model(time, guess[0], guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], 0, guess[9],
                          guess[10], guess[11], 0, guess[13], guess[14], guess[15],guess[16])[0:s_l] + np.min(np.abs(measured_signal2)),
                    label="Fit Flux P1", color='darkorange')
                self._static_ax.plot(
                    p4_2m.model(time, 0, guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], 0, guess[9],
                          guess[10], guess[11], 0, guess[13], guess[14], guess[15],guess[16])[0:s_l] + np.min(np.abs(measured_signal2)),
                    label="Fit Flux P2", color='navy')
                self._static_ax.plot(
                    p4_2m.model(time, 0, guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], guess[8], guess[9],
                          guess[10], guess[11], 0, guess[13], guess[14], guess[15],guess[16])[0:s_l] + np.min(np.abs(measured_signal2)),
                    label="Fit Flux P3", color = 'darkgreen')
                self._static_ax.plot(
                    p4_2m.model(time, 0, guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], 0, guess[9],
                          guess[10], guess[11], guess[12], guess[13], guess[14], guess[15],guess[16])[0:s_l] + np.min(np.abs(measured_signal2)), label="Fit Flux P4", color = 'dodgerblue')
                self._static_ax.plot(model[0:s_l] + np.min(np.abs(measured_signal2)), color='black', label="Fit")



            if self.modee_radioButton_4p_2_2m.isChecked():
                model= p4_2_2m.model(time, guess[0],guess[1],guess[2],guess[3],guess[4],guess[5],guess[6],guess[7],guess[8],guess[9],guess[10],guess[11],guess[12],guess[13],guess[14],guess[15],guess[16],guess[17])
                pulse1 = guess[0] * np.exp(-.5 * ((time - guess[1]) / guess[2]) ** 2)
                pulse2 = guess[4] * np.exp(-.5 * ((time - guess[5]) / guess[6]) ** 2)
                pulse3 = guess[8] * np.exp(-.5 * ((time - guess[9]) / guess[10]) ** 2)
                pulse4 = guess[12] * np.exp(-.5 * ((time - guess[13]) / guess[14]) ** 2)

                self._static_ax.plot(pulse1 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 1", color='darkorange')
                self._static_ax.plot(pulse2 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 2", color='navy')
                self._static_ax.plot(pulse3 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 3", color='darkgreen')
                self._static_ax.plot(pulse4 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 4", color='dodgerblue')

                self._static_ax.plot(
                    p4_2_2m.model(time, guess[0], guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], 0, guess[9],
                          guess[10], guess[11], 0, guess[13], guess[14], guess[15],guess[16],guess[17])[0:s_l] + np.min(np.abs(measured_signal2)),
                    label="Fit Flux P1", color='darkorange')
                self._static_ax.plot(
                    p4_2_2m.model(time, 0, guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], 0, guess[9],
                          guess[10], guess[11], 0, guess[13], guess[14], guess[15],guess[16],guess[17])[0:s_l] + np.min(np.abs(measured_signal2)),
                    label="Fit Flux P2", color='navy')
                self._static_ax.plot(
                    p4_2_2m.model(time, 0, guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], guess[8], guess[9],
                          guess[10], guess[11], 0, guess[13], guess[14], guess[15],guess[16],guess[17])[0:s_l] + np.min(np.abs(measured_signal2)),
                    label="Fit Flux P3", color = 'darkgreen')
                self._static_ax.plot(
                    p4_2_2m.model(time, 0, guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], 0, guess[9],
                          guess[10], guess[11], guess[12], guess[13], guess[14], guess[15],guess[16],guess[17])[0:s_l] + np.min(np.abs(measured_signal2)), label="Fit Flux P4", color = 'dodgerblue')
                self._static_ax.plot(model[0:s_l] + np.min(np.abs(measured_signal2)), color='black', label="Fit")

            if self.modee_radioButton_4p_3m.isChecked():
                model= p4_3m.model(time, guess[0],guess[1],guess[2],guess[3],guess[4],guess[5],guess[6],guess[7],guess[8],guess[9],guess[10],guess[11],guess[12],guess[13],guess[14],guess[16])

                pulse1 = guess[0] * np.exp(-.5 * ((time - guess[1]) / guess[2]) ** 2)
                pulse2 = guess[4] * np.exp(-.5 * ((time - guess[5]) / guess[6]) ** 2)
                pulse3 = guess[8] * np.exp(-.5 * ((time - guess[9]) / guess[10]) ** 2)
                pulse4 = guess[12] * np.exp(-.5 * ((time - guess[13]) / guess[14]) ** 2)

                self._static_ax.plot(pulse1 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 1", color='darkorange')
                self._static_ax.plot(pulse2 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 2", color='navy')
                self._static_ax.plot(pulse3 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 3", color='darkgreen')
                self._static_ax.plot(pulse4 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 4", color='dodgerblue')

                self._static_ax.plot(
                    p4_3m.model(time, guess[0], guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], 0, guess[9],
                          guess[10], guess[11], 0, guess[13], guess[14],guess[16])[0:s_l] + np.min(np.abs(measured_signal2)),
                    label="Fit Flux P1", color='darkorange')
                self._static_ax.plot(
                    p4_3m.model(time, 0, guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], 0, guess[9],
                          guess[10], guess[11], 0, guess[13], guess[14],guess[16])[0:s_l] + np.min(np.abs(measured_signal2)),
                    label="Fit Flux P2", color='navy')
                self._static_ax.plot(
                    p4_3m.model(time, 0, guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], guess[8], guess[9],
                          guess[10], guess[11], 0, guess[13], guess[14],guess[16])[0:s_l] + np.min(np.abs(measured_signal2)),
                    label="Fit Flux P3", color = 'darkgreen')
                self._static_ax.plot(
                    p4_3m.model(time, 0, guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], 0, guess[9],
                          guess[10], guess[11], guess[12], guess[13], guess[14],guess[16])[0:s_l] + np.min(np.abs(measured_signal2)), label="Fit Flux P4", color = 'dodgerblue')
                self._static_ax.plot(model[0:s_l] + np.min(np.abs(measured_signal2)), color='black', label="Fit")

            if self.modee_radioButton_4p_4m.isChecked():
                model= p4_4m.model(time, guess[0],guess[1],guess[2],guess[3],guess[4],guess[5],guess[6],guess[7],guess[8],guess[9],guess[10],guess[12],guess[13],guess[14],guess[16])


                pulse1 = guess[0] * np.exp(-.5 * ((time - guess[1]) / guess[2]) ** 2)
                pulse2 = guess[4] * np.exp(-.5 * ((time - guess[5]) / guess[6]) ** 2)
                pulse3 = guess[8] * np.exp(-.5 * ((time - guess[9]) / guess[10]) ** 2)
                pulse4 = guess[12] * np.exp(-.5 * ((time - guess[13]) / guess[14]) ** 2)

                self._static_ax.plot(pulse1 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 1", color='darkorange')
                self._static_ax.plot(pulse2 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 2", color='navy')
                self._static_ax.plot(pulse3 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 3", color='darkgreen')
                self._static_ax.plot(pulse4 + np.min(np.abs(measured_signal2)), '--', label="Fit Pulse 4", color='dodgerblue')


                self._static_ax.plot(
                    p4_4m.model(time, guess[0], guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], 0, guess[9],
                                guess[10],  0, guess[13], guess[14], guess[16])[0:s_l] + np.min(np.abs(measured_signal2)),
                    label="Fit Flux P1", color='darkorange')
                self._static_ax.plot(
                    p4_4m.model(time, 0, guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], 0, guess[9],
                                guess[10],  0, guess[13], guess[14], guess[16])[0:s_l] + np.min(np.abs(measured_signal2)),
                    label="Fit Flux P2", color='navy')
                self._static_ax.plot(
                    p4_4m.model(time, 0, guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], guess[8], guess[9],
                                guess[10],  0, guess[13], guess[14], guess[16])[0:s_l] + np.min(np.abs(measured_signal2)),
                    label="Fit Flux P3", color='darkgreen')
                self._static_ax.plot(
                    p4_4m.model(time, 0, guess[1], guess[2], guess[3], 0, guess[5], guess[6], guess[7], 0, guess[9],
                                guess[10], guess[12], guess[13], guess[14], guess[16])[0:s_l] + np.min(np.abs(measured_signal2)), label="Fit Flux P4", color='dodgerblue')
                self._static_ax.plot(model[0:s_l] + np.min(np.abs(measured_signal2)), color='black', label="Fit")

            self.static_canvas.draw()



        def load_data(self):
            if not os.path.exists(self.filename):
                fname = QtWidgets.QFileDialog.getOpenFileName(self, 'Open File','','IDL Files (*.sav);;Numpy Array (*.np*) ')
                #fname= QtWidgets.QFileDialog.getOpenFileName(self, 'Open File','', 'IDL Files (*.sav)')
                if fname:
                    self.filename = fname[0]

            if os.path.exists(self.filename):
                if self.filename.endswith('.sav'):
                    load = scipy.readsav(self.filename)

                    m_s = np.array(load.m_s)
                    m_s_e = np.array(load.m_s_e)
                    freqs = np.around(load.freqs,2)

                    if np.size(freqs) == np.size(m_s, 0):
                        m_s = np.transpose(m_s)
                    if np.size(freqs) == np.size(m_s_e, 0):
                        m_s_e = np.transpose(m_s_e)

                    p_times= np.arange(np.shape(m_s)[0])
                    try:
                        p_times = np.array(load.p_times)
                    except:
                        pass

                    try:
                        int_times=np.array(load.int_times)
                        for t in np.arange(0, len(int_times)):
                            ttemp = parser.parse(str(int_times[t]), fuzzy=True)
                            p_times[t] = datetime.timestamp(ttemp)
                        p_times=p_times - p_times[0]
                    except:
                        pass

                if self.filename.endswith('.npz'):
                    load = np.load(self.filename)
                    m_s = np.array(load['m_s'])
                    m_s_e = np.array(load['m_s_e'])
                    freqs = np.around(load['freqs'],2)

                    if np.size(freqs) == np.size(m_s, 0):
                        m_s = np.transpose(m_s)
                    if np.size(freqs) == np.size(m_s_e, 0):
                        m_s_e = np.transpose(m_s_e)

                    p_times= np.arange(np.shape(m_s)[0])
                    try:
                        p_times = np.array(load['p_times'])
                    except:
                        pass

                    try:
                        int_times=np.array(load['int_times'])
                        for t in np.arange(0, len(int_times)):
                            ttemp = parser.parse(str(int_times[t]), fuzzy=True)
                            p_times[t] = datetime.timestamp(ttemp)
                        p_times=p_times - p_times[0]
                    except:
                        pass






            f_check=min([np.size(m_s,1),np.size(freqs,0),np.size(m_s_e,1)])
            t_check=min([np.size(m_s,0),np.size(m_s_e,0)])

            if int(self.inp_Freq_range_max.toPlainText()) > f_check:
                self.inp_Freq_range_max.setText(str(f_check))

            if int(self.inp_Time_range_max.toPlainText()) > t_check:
                self.inp_Time_range_max.setText(str(t_check))


            return m_s, m_s_e, freqs,p_times

        def check_sample_data(self):

            m_s, m_s_e, freqs, p_times = load_data(self)
            f= int(self.inp_samp_freq.toPlainText())
            t_i = int(self.inp_Time_range_min.toPlainText())
            t_f = int(self.inp_Time_range_max.toPlainText())

            measured_signal2 = m_s[t_i:t_f, f]
            measured_signal2e = m_s_e[t_i:t_f, f]

            return measured_signal2, measured_signal2e, p_times


        def press_New_File(self):

            fname = QtWidgets.QFileDialog.getOpenFileName(self, 'Open File','','IDL Files (*.sav);;Numpy Array (*.np*)')
            if fname:
                self.filename = fname[0]
            load_data(self)

        def press_plot_samp_freq(self):

            measured_signal2, measured_signal2e, p_times = check_sample_data(self)

            t_i = int(self.inp_Time_range_min.toPlainText())
            t_f = int(self.inp_Time_range_max.toPlainText())
            s_l=t_f-t_i
            t = p_times[t_i:t_f] - p_times[t_i]

            self._static_ax.cla()
            if self.modee_log_scale_check.isChecked(): self._static_ax.set_yscale("log")
            if self.modee_log_scale_check.isChecked()==False: self._static_ax.set_yscale("linear")
            self._static_ax.errorbar(t, measured_signal2, yerr=measured_signal2e, color='red',fmt='.')
            self.static_canvas.draw()

        def press_suggest_model(self):

            m_s, m_s_e,freqs,p_times = load_data(self)
            guess, min_g, max_g = check_guess()
            f= int(self.inp_samp_freq.toPlainText())
            t_i = int(self.inp_Time_range_min.toPlainText())
            t_f = int(self.inp_Time_range_max.toPlainText())

            best_model, xirs, fit_model, results= p_sort.sorter(m_s, m_s_e, freqs, p_times, guess, min_g, max_g, t_i, t_f, f)
            self.current_model_results= results
            self.current_model_flag= True

            fit_model= np.around(fit_model,3)

            try:
                best_model[0][0]
                flag = 1
            except:
                flag = 0


            if flag==1:
                if best_model[0][:] == [0]:
                    self.modee_radioButton_1p.setChecked(True)
                if best_model[0][:] == [11]:
                    self.modee_radioButton_1p_m.setChecked(True)
                if best_model[0][:] == [1]:
                    self.modee_radioButton_2p_s.setChecked(True)
                if best_model[0][:] == [2]:
                    self.modee_radioButton_2p_m.setChecked(True)
                if best_model[0][:] == [3]:
                    self.modee_radioButton_3p_s.setChecked(True)
                if best_model[0][:] == [4]:
                    self.modee_radioButton_3p_2m.setChecked(True)
                if best_model[0][:] == [5]:
                    self.modee_radioButton_3p_3m.setChecked(True)
                if best_model[0][:] == [6]:
                    self.modee_radioButton_4p_s.setChecked(True)
                if best_model[0][:] == [7]:
                    self.modee_radioButton_4p_2m.setChecked(True)
                if best_model[0][:] == [8]:
                    self.modee_radioButton_4p_2_2m.setChecked(True)
                if best_model[0][:] == [9]:
                    self.modee_radioButton_4p_3m.setChecked(True)
                if best_model[0][:] == [10]:
                    self.modee_radioButton_4p_4m.setChecked(True)
            else:
                pass
            if flag==0:
                if best_model[0] == [0]:
                    self.modee_radioButton_1p.setChecked(True)
                if best_model[0] == [11]:
                    self.modee_radioButton_1p_m.setChecked(True)
                if best_model[0] == [1]:
                    self.modee_radioButton_2p_s.setChecked(True)
                if best_model[0] == [2]:
                    self.modee_radioButton_2p_m.setChecked(True)
                if best_model[0] == [3]:
                    self.modee_radioButton_3p_s.setChecked(True)
                if best_model[0] == [4]:
                    self.modee_radioButton_3p_2m.setChecked(True)
                if best_model[0] == [5]:
                    self.modee_radioButton_3p_3m.setChecked(True)
                if best_model[0] == [6]:
                    self.modee_radioButton_4p_s.setChecked(True)
                if best_model[0] == [7]:
                    self.modee_radioButton_4p_2m.setChecked(True)
                if best_model[0] == [8]:
                    self.modee_radioButton_4p_2_2m.setChecked(True)
                if best_model[0] == [9]:
                    self.modee_radioButton_4p_3m.setChecked(True)
                if best_model[0] == [10]:
                    self.modee_radioButton_4p_4m.setChecked(True)
            else:
                pass

            param_updater(self,fit_model)
            press_plot_guess(self)

        def param_updater(self,fit_model):
            try:
                self.inp_g_a_1.setText(str(fit_model[0]))

            except:
                self.inp_g_a_1.setText(self.inp_g_a_1.toPlainText())

            try:
                self.inp_g_mu_1.setText(str(fit_model[1]))

            except:
                self.inp_g_mu_1.setText(self.inp_g_mu_1.toPlainText())

            try:
                self.inp_g_sig_1.setText(str(fit_model[2]))
            except:
                self.inp_g_sig_1.setText(self.inp_g_sig_1.toPlainText())

            try:
                self.inp_g_tau_1.setText(str(fit_model[3]))
            except:
                self.inp_g_tau_1.setText(self.inp_g_tau_1.toPlainText())


            try:
                self.inp_g_a_2.setText(str(fit_model[4]))
            except:
                self.inp_g_a_2.setText(self.inp_g_a_2.toPlainText())

            try:
                self.inp_g_mu_2.setText(str(fit_model[5]))
            except:
                self.inp_g_mu_2.setText(self.inp_g_mu_2.toPlainText())

            try:
                self.inp_g_sig_2.setText(str(fit_model[6]))
            except:
                self.inp_g_sig_2.setText(self.inp_g_sig_2.toPlainText())

            try:
                self.inp_g_tau_2.setText(str(fit_model[7]))
            except:
                self.inp_g_tau_2.setText(self.inp_g_tau_2.toPlainText())

            try:
                self.inp_g_a_3.setText(str(fit_model[8]))
            except:
                self.inp_g_a_3.setText(self.inp_g_a_3.toPlainText())

            try:
                self.inp_g_mu_3.setText(str(fit_model[9]))
            except:
                self.inp_g_mu_3.setText(self.inp_g_mu_3.toPlainText())

            try:
                self.inp_g_sig_3.setText(str(fit_model[10]))
            except:
                self.inp_g_sig_3.setText(self.inp_g_sig_3.toPlainText())

            try:
                self.inp_g_tau_3.setText(str(fit_model[11]))
            except:
                self.inp_g_tau_3.setText(self.inp_g_tau_3.toPlainText())

            try:
                self.inp_g_a_4.setText(str(fit_model[12]))
            except:
                self.inp_g_a_4.setText(self.inp_g_a_4.toPlainText())

            try:
                self.inp_g_mu_4.setText(str(fit_model[13]))
            except:
                self.inp_g_mu_4.setText(self.inp_g_mu_4.toPlainText())

            try:
                self.inp_g_sig_4.setText(str(fit_model[14]))
            except:
                self.inp_g_sig_4.setText(self.inp_g_sig_4.toPlainText())

            try:
                self.inp_g_tau_4.setText(str(fit_model[15]))
            except:
                self.inp_g_tau_4.setText(self.inp_g_tau_4.toPlainText())

            try:
                self.inp_g_w_1.setText(str(fit_model[16]))
            except:
                self.inp_g_w_1.setText(self.inp_g_w_1.toPlainText())

            try:
                self.inp_g_w_2.setText(str(fit_model[17]))
            except:
                self.inp_g_w_2.setText(self.inp_g_w_2.toPlainText())



            if self.modee_radioButton_1p_m.isChecked():
                try:
                    self.inp_g_tau_2.setText(str(fit_model[4]))
                    self.inp_g_w_1.setText(str(fit_model[5]))
                except:
                    self.inp_g_tau_2.setText(self.inp_g_tau_2.toPlainText())
                    self.inp_g_w_1.setText(self.inp_g_w_1.toPlainText())
            if self.modee_radioButton_2p_m.isChecked():
                try:
                    self.inp_g_w_1.setText(str(fit_model[8]))
                except:
                    self.inp_g_w_1.setText(self.inp_g_w_1.toPlainText())
            if self.modee_radioButton_3p_2m.isChecked():
                try:
                    self.inp_g_w_1.setText(str(fit_model[12]))
                except:
                    self.inp_g_w_1.setText(self.inp_g_w_1.toPlainText())
            if self.modee_radioButton_3p_3m.isChecked():
                try:
                    self.inp_g_w_1.setText(str(fit_model[11]))
                except:
                    self.inp_g_w_1.setText(self.inp_g_w_1.toPlainText())
            if self.modee_radioButton_4p_3m.isChecked():
                try:
                    self.inp_g_w_1.setText(str(fit_model[15]))
                except:
                    self.inp_g_w_1.setText(self.inp_g_w_1.toPlainText())

            if self.modee_radioButton_4p_4m.isChecked():
                try:
                    self.inp_g_a_4.setText(str(fit_model[11]))
                except:
                    self.inp_g_a_4.setText(self.inp_g_a_4.toPlainText())

                try:
                    self.inp_g_mu_4.setText(str(fit_model[12]))
                except:
                    self.inp_g_mu_4.setText(self.inp_g_mu_4.toPlainText())

                try:
                    self.inp_g_sig_4.setText(str(fit_model[13]))
                except:
                    self.inp_g_sig_4.setText(self.inp_g_sig_4.toPlainText())
                try:
                    self.inp_g_w_1.setText(str(fit_model[14]))
                except:
                    self.inp_g_w_1.setText(self.inp_g_w_1.toPlainText())



        def press_Fit_Current_Guess(self):

            if self.modee_log_scale_check.isChecked(): log_scale=True
            if self.modee_log_scale_check.isChecked()==False: log_scale=False

            m_s, m_s_e, freqs, p_times = load_data(self)
            guess, min_g, max_g = check_guess()


            t_i = int(self.inp_Time_range_min.toPlainText())
            t_f = int(self.inp_Time_range_max.toPlainText())
            f_i = int(self.inp_Freq_range_min.toPlainText())
            f_f = int(self.inp_Freq_range_max.toPlainText())

            init_guess_1pulse = guess[0:4]
            init_guess_1pulse_mixed = np.append(guess[0:4],[guess[7], guess[16]])
            init_guess_2pulse_separate = guess[0:8]
            init_guess_2pulse_mixed = np.append(guess[0:8], guess[16])
            init_guess_3pulse_separate = guess[0:12]
            init_guess_3pulse_2mixed = np.append(guess[0:12], guess[16])
            init_guess_3pulse_3mixed = np.append(guess[0:11], guess[16])
            init_guess_4pulse_separate = guess[0:16]
            init_guess_4pulse_2mixed = guess[0:17]
            init_guess_4pulse_2_2mixed = guess[0:18]
            init_guess_4pulse_3mixed = np.append(guess[0:15], guess[16])
            init_guess_4pulse_4mixed = np.append(guess[0:11], [guess[12], guess[13], guess[14], guess[16]])

            lb_1pulse = min_g[0:4]
            lb_1pulse_mixed = np.append(min_g[0:4], [min_g[7],min_g[16]])
            lb_2pulse_separate = min_g[0:8]
            lb_2pulse_mixed = np.append(min_g[0:8], min_g[16])
            lb_3pulse_separate = min_g[0:12]
            lb_3pulse_2mixed = np.append(min_g[0:12], min_g[16])
            lb_3pulse_3mixed = np.append(min_g[0:11], min_g[16])
            lb_4pulse_separate = min_g[0:16]
            lb_4pulse_2mixed = np.append(min_g[0:16], min_g[16])
            lb_4pulse_2_2mixed = np.append(min_g[0:16], [min_g[16], min_g[17]])
            lb_4pulse_3mixed = np.append(min_g[0:15], min_g[16])
            lb_4pulse_4mixed = np.append(min_g[0:11], [min_g[12], min_g[13], min_g[14], min_g[16]])

            ub_1pulse = max_g[0:4]
            ub_1pulse_mixed = np.append(max_g[0:4], [max_g[7],max_g[16]])
            ub_2pulse_separate = max_g[0:8]
            ub_2pulse_mixed = np.append(max_g[0:8], max_g[16])
            ub_3pulse_separate = max_g[0:12]
            ub_3pulse_2mixed = np.append(max_g[0:12], max_g[16])
            ub_3pulse_3mixed = np.append(max_g[0:11], max_g[16])
            ub_4pulse_separate = max_g[0:16]
            ub_4pulse_2mixed = np.append(max_g[0:16], max_g[16])
            ub_4pulse_2_2mixed = np.append(max_g[0:16], [max_g[16], max_g[17]])
            ub_4pulse_3mixed = np.append(max_g[0:15], max_g[16])
            ub_4pulse_4mixed = np.append(max_g[0:11], [max_g[12], max_g[13], max_g[14], max_g[16]])


            if self.modee_radioButton_1p.isChecked():
                print("Fitting as 1 Pulse")
                p1.p1(m_s=m_s, m_s_e=m_s_e, freqs=freqs,p_times=p_times, f_i=f_i, f_f=f_f, t_i=t_i, t_f=t_f, ig=init_guess_1pulse, ub=ub_1pulse, lb=lb_1pulse, f_unit=self.f_unit, b_unit=self.b_unit, t_unit= self.t_unit, log_scale=log_scale)

            if self.modee_radioButton_1p_m.isChecked():
                print("Fitting as 1 Pulse")
                p1_m.p1_m(m_s=m_s, m_s_e=m_s_e, freqs=freqs,p_times=p_times, f_i=f_i, f_f=f_f, t_i=t_i, t_f=t_f, ig=init_guess_1pulse_mixed, ub=ub_1pulse_mixed, lb=lb_1pulse_mixed, f_unit=self.f_unit, b_unit=self.b_unit, t_unit= self.t_unit, log_scale=log_scale)

            if self.modee_radioButton_2p_s.isChecked():
                print("Fitting as 2 Separate Pulses")
                p2_s.p2_s(m_s=m_s, m_s_e=m_s_e, freqs=freqs,p_times=p_times, f_i=f_i, f_f=f_f, t_i=t_i, t_f=t_f, ig=init_guess_2pulse_separate, ub=ub_2pulse_separate, lb=lb_2pulse_separate, f_unit=self.f_unit, b_unit=self.b_unit, t_unit= self.t_unit, log_scale=log_scale)

            if self.modee_radioButton_2p_m.isChecked():
                print("Fitting as 2 Pulses with mixed decays")
                p2_2m.p2_2m(m_s=m_s,m_s_e=m_s_e,freqs=freqs,p_times=p_times,f_i=f_i,f_f=f_f,t_i=t_i,t_f=t_f,ig=init_guess_2pulse_mixed,ub=ub_2pulse_mixed,lb=lb_2pulse_mixed, f_unit=self.f_unit, b_unit=self.b_unit, t_unit= self.t_unit, log_scale=log_scale)

            if self.modee_radioButton_3p_s.isChecked():
                print("Fitting as 3 Separate Pulses")
                p3_s.p3_s(m_s=m_s,m_s_e=m_s_e,freqs=freqs,p_times=p_times,f_i=f_i,f_f=f_f,t_i=t_i,t_f=t_f,ig=init_guess_3pulse_separate,ub=ub_3pulse_separate,lb=lb_3pulse_separate, f_unit=self.f_unit, b_unit=self.b_unit, t_unit= self.t_unit, log_scale=log_scale)

            if self.modee_radioButton_3p_2m.isChecked():
                print("Fitting as 3 Pulses 2 of which have mixed decays")
                p3_2m.p3_2m(m_s=m_s,m_s_e=m_s_e,freqs=freqs,p_times=p_times,f_i=f_i,f_f=f_f,t_i=t_i,t_f=t_f,ig=init_guess_3pulse_2mixed,ub=ub_3pulse_2mixed,lb=lb_3pulse_2mixed, f_unit=self.f_unit, b_unit=self.b_unit, t_unit= self.t_unit, log_scale=log_scale)

            if self.modee_radioButton_3p_3m.isChecked():
                print("Fitting as 3 Pulses with have mixed decays")
                p3_3m.p3_3m(m_s=m_s,m_s_e=m_s_e,freqs=freqs,p_times=p_times,f_i=f_i,f_f=f_f,t_i=t_i,t_f=t_f,ig=init_guess_3pulse_3mixed,ub=ub_3pulse_3mixed,lb=lb_3pulse_3mixed, f_unit=self.f_unit, b_unit=self.b_unit, t_unit= self.t_unit, log_scale=log_scale)

            if self.modee_radioButton_4p_s.isChecked():
                print("Fitting as 4 Separate Pulses")
                p4_s.p4_s(m_s=m_s,m_s_e=m_s_e,freqs=freqs,p_times=p_times,f_i=f_i,f_f=f_f,t_i=t_i,t_f=t_f,ig=init_guess_4pulse_separate,ub=ub_4pulse_separate,lb=lb_4pulse_separate, f_unit=self.f_unit, b_unit=self.b_unit, t_unit= self.t_unit, log_scale=log_scale)

            if self.modee_radioButton_4p_2m.isChecked():
                print("Fitting as 4 Pulses 2 of which have mixed decays")
                p4_2m.p4_2m(m_s=m_s,m_s_e=m_s_e,freqs=freqs,p_times=p_times,f_i=f_i,f_f=f_f,t_i=t_i,t_f=t_f,ig=init_guess_4pulse_2mixed,ub=ub_4pulse_2mixed,lb=lb_4pulse_2mixed, f_unit=self.f_unit, b_unit=self.b_unit, t_unit= self.t_unit, log_scale=log_scale)

            if self.modee_radioButton_4p_2_2m.isChecked():
                print("Fitting as 4 Pulses with 2 sets of 2 mixed decays")
                p4_2_2m.p4_2_2m(m_s=m_s,m_s_e=m_s_e,freqs=freqs,p_times=p_times,f_i=f_i,f_f=f_f,t_i=t_i,t_f=t_f,ig=init_guess_4pulse_2_2mixed,ub=ub_4pulse_2_2mixed,lb=lb_4pulse_2_2mixed, f_unit=self.f_unit, b_unit=self.b_unit, t_unit= self.t_unit, log_scale=log_scale)

            if self.modee_radioButton_4p_3m.isChecked():
                print("Fitting as 4 Pulses 3 of which have mixed decays")
                p4_3m.p4_3m(m_s=m_s,m_s_e=m_s_e,freqs=freqs,p_times=p_times,f_i=f_i,f_f=f_f,t_i=t_i,t_f=t_f,ig=init_guess_4pulse_3mixed,ub=ub_4pulse_3mixed,lb=lb_4pulse_3mixed, f_unit=self.f_unit, b_unit=self.b_unit, t_unit= self.t_unit, log_scale=log_scale)

            if self.modee_radioButton_4p_4m.isChecked():
                print("Fitting as 4 Pulses with have mixed decays")
                p4_4m.p4_4m(m_s=m_s,m_s_e=m_s_e,freqs=freqs,p_times=p_times,f_i=f_i,f_f=f_f,t_i=t_i,t_f=t_f,ig=init_guess_4pulse_4mixed,ub=ub_4pulse_4mixed,lb=lb_4pulse_4mixed, f_unit=self.f_unit, b_unit=self.b_unit, t_unit= self.t_unit, log_scale=log_scale)

        def press_suggest_params(self):

            if not self.current_model_flag:
                print('Please Use Suggest Model First')
            if self.current_model_flag:
                if self.modee_radioButton_1p.isChecked():
                    fit_model= np.around(self.current_model_results[0,:],3)
                if self.modee_radioButton_1p_m.isChecked():
                    fit_model= np.around(self.current_model_results[11,:],3)
                if self.modee_radioButton_2p_s.isChecked():
                    fit_model= np.around(self.current_model_results[1,:],3)
                if self.modee_radioButton_2p_m.isChecked():
                    fit_model= np.around(self.current_model_results[2,:],3)
                if self.modee_radioButton_3p_s.isChecked():
                    fit_model= np.around(self.current_model_results[3,:], 3)
                if self.modee_radioButton_3p_2m.isChecked():
                    fit_model= np.around(self.current_model_results[4,:],3)
                if self.modee_radioButton_3p_3m.isChecked():
                    fit_model= np.around(self.current_model_results[5,:],3)
                if self.modee_radioButton_4p_s.isChecked():
                    fit_model= np.around(self.current_model_results[6,:],3)
                if self.modee_radioButton_4p_2m.isChecked():
                    fit_model= np.around(self.current_model_results[7,:],3)
                if self.modee_radioButton_4p_2_2m.isChecked():
                    fit_model= np.around(self.current_model_results[8,:],3)
                if self.modee_radioButton_4p_3m.isChecked():
                    fit_model= np.around(self.current_model_results[9,:],3)
                if self.modee_radioButton_4p_4m.isChecked():
                    fit_model= np.around(self.current_model_results[10,:],3)
                param_updater(self, fit_model)
                press_plot_guess(self)


        self.retranslateUi(PIP_Decomp_Fitter)
        QtCore.QMetaObject.connectSlotsByName(PIP_Decomp_Fitter)

    def retranslateUi(self, PIP_Decomp_Fitter):
        _translate = QtCore.QCoreApplication.translate
        PIP_Decomp_Fitter.setWindowTitle(_translate("PIP_Decomp_Fitter", "PIP Decomp Pulse Fitter"))
        self.label_log_scale.setText(_translate("PIP_Decomp_Fitter","Log Scale"))
        self.Label_a_1.setText(_translate("PIP_Decomp_Fitter", "a"))
        self.Label_a_2.setText(_translate("PIP_Decomp_Fitter", "a"))
        self.Label_a_3.setText(_translate("PIP_Decomp_Fitter", "a"))
        self.Label_a_4.setText(_translate("PIP_Decomp_Fitter", "a"))
        self.Label_mu_1.setText(_translate("PIP_Decomp_Fitter", "μ"))
        self.Label_mu_2.setText(_translate("PIP_Decomp_Fitter", "μ"))
        self.Label_mu_3.setText(_translate("PIP_Decomp_Fitter", "μ"))
        self.Label_mu_4.setText(_translate("PIP_Decomp_Fitter", "μ"))
        self.Label_sig_1.setText(_translate("PIP_Decomp_Fitter", "σ"))
        self.Label_sig_2.setText(_translate("PIP_Decomp_Fitter", "σ"))
        self.Label_sig_3.setText(_translate("PIP_Decomp_Fitter", "σ"))
        self.Label_sig_4.setText(_translate("PIP_Decomp_Fitter", "σ"))
        self.Label_tau_1.setText(_translate("PIP_Decomp_Fitter", "𝞽"))
        self.Label_tau_2.setText(_translate("PIP_Decomp_Fitter", "𝞽"))
        self.Label_tau_3.setText(_translate("PIP_Decomp_Fitter", "𝞽"))
        self.Label_tau_4.setText(_translate("PIP_Decomp_Fitter", "𝞽"))
        self.Label_w_1.setText(_translate("PIP_Decomp_Fitter", "w"))
        self.Label_w_2.setText(_translate("PIP_Decomp_Fitter", "w_2"))
        self.Label_guess.setText(_translate("PIP_Decomp_Fitter", "guess"))
        self.Label_min.setText(_translate("PIP_Decomp_Fitter", "min"))
        self.Label_max.setText(_translate("PIP_Decomp_Fitter", "max"))
        self.label_pulse_1.setText(_translate("PIP_Decomp_Fitter", "Pulse 1"))
        self.label_pulse_2.setText(_translate("PIP_Decomp_Fitter", "Pulse 2"))
        self.label_pulse_3.setText(_translate("PIP_Decomp_Fitter", "Pulse 3"))
        self.label_pulse_4.setText(_translate("PIP_Decomp_Fitter", "Pulse 4"))
        self.label_weights.setText(_translate("PIP_Decomp_Fitter", "Weights"))
        self.pushButton__plot_guess.setText(_translate("PIP_Decomp_Fitter", "Plot Current Guess"))
        self.pushButton_plot_samp_freq.setText(_translate("PIP_Decomp_Fitter", "Plot Sample Freq"))
        self.pushButton_Suggest_Model.setText(_translate("PIP_Decomp_Fitter", "Suggest Model "))
        self.pushButton_Suggest_Prams.setText(_translate("PIP_Decomp_Fitter", "Suggest Parameters"))
        self.label_freq.setText(_translate("PIP_Decomp_Fitter", "Frequency"))
        self.label_select_freq.setText(_translate("PIP_Decomp_Fitter", "Sample"))
        self.label_2.setText(_translate("PIP_Decomp_Fitter","Model"))
        self.modee_radioButton_1p.setText(_translate("PIP_Decomp_Fitter", "1p"))
        self.modee_radioButton_1p_m.setText(_translate("PIP_Decomp_Fitter", "1p_m"))
        self.modee_radioButton_2p_s.setText(_translate("PIP_Decomp_Fitter", "2p_s"))
        self.modee_radioButton_2p_m.setText(_translate("PIP_Decomp_Fitter", "2p_m"))
        self.modee_radioButton_3p_s.setText(_translate("PIP_Decomp_Fitter", "3p_s"))
        self.modee_radioButton_3p_2m.setText(_translate("PIP_Decomp_Fitter", "3p_2m"))
        self.modee_radioButton_4p_3m.setText(_translate("PIP_Decomp_Fitter", "4p_3m"))
        self.modee_radioButton_3p_3m.setText(_translate("PIP_Decomp_Fitter", "3p_3m"))
        self.modee_radioButton_4p_s.setText(_translate("PIP_Decomp_Fitter", "4p_s"))
        self.modee_radioButton_4p_2_2m.setText(_translate("PIP_Decomp_Fitter", "4p_2_2m"))
        self.modee_radioButton_4p_2m.setText(_translate("PIP_Decomp_Fitter", "4p_2m"))
        self.modee_radioButton_4p_4m.setText(_translate("PIP_Decomp_Fitter", "4p_4m"))
        self.label_freq_range.setText(_translate("PIP_Decomp_Fitter", "Range "))
        self.label_time_range.setText(_translate("PIP_Decomp_Fitter", "Time Range "))
        self.pushButton_Fit_Current_Guess.setText(_translate("PIP_Decomp_Fitter", "Fit With Current Guess"))
        self.pushButton_New_File.setText(_translate("PIP_Decomp_Fitter", "New File"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    PIP_Decomp_Fitter = QtWidgets.QMainWindow()
    ui = Ui_PIP_Decomp_Fitter()
    ui.setupUi(PIP_Decomp_Fitter)
    PIP_Decomp_Fitter.show()
    sys.exit(app.exec_())
